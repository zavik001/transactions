package example.transactions.examples.java.core;


// Карта Java-компонентов: JDK → JRE → JVM → JIT
// ├── 1. JDK (Java Development Kit)
// │ ├── Назначение: Полный набор инструментов для разработки, компиляции и выполнения
// │ │ │ Java-программ.
// │ ├── За что отвечает: Писание кода, компиляция (.java → .class), запуск, отладка, создание JAR.
// │ ├── Компоненты:
// │ │ ├── JRE (Java Runtime Environment)
// │ │ │ ├── Назначение: Среда для выполнения Java-программ.
// │ │ │ ├── За что отвечает: Запуск байткода, управление библиотеками, предоставление JVM.
// │ │ │ ├── Компоненты:
// │ │ │ │ ├── JVM (Java Virtual Machine)
// │ │ │ │ │ ├── Назначение: Виртуальная машина, исполняющая байткод.
// │ │ │ │ │ ├── За что отвечает: Загрузка классов, управление памятью, выполнение кода,
// │ │ │ │ │ | оптимизация.
// │ │ │ │ │ ├── Компоненты:
// │ │ │ │ │ │ ├── JIT (Just-In-Time Compiler)
// │ │ │ │ │ │ │ ├── Назначение: Компилятор внутри JVM.
// │ │ │ │ │ │ │ ├── За что отвечает: Преобразование байткода в машинный код для ускорения
// │ │ │ │ │ │ │ выполнения.
// │ │ │ │ │ │ ├── Class Loader Subsystem
// │ │ │ │ │ │ │ ├── Назначение: Загрузка классов в JVM.
// │ │ │ │ │ │ │ ├── За что отвечает: Чтение .class-файлов, проверка, подготовка, инициализация.
// │ │ │ │ │ │ ├── Garbage Collector (GC)
// │ │ │ │ │ │ │ ├── Назначение: Система управления памятью.
// │ │ │ │ │ │ │ ├── За что отвечает: Освобождение памяти от ненужных объектов (mark-sweep, G1,
// │ │ │ │ │ │ │ ZGC).
// │ │ │ │ │ │ └── Execution Engine
// │ │ │ │ │ │ ├── Назначение: Механизм выполнения байткода.
// │ │ │ │ │ │ ├── За что отвечает: Интерпретация или компиляция (через JIT) байткода в машинный
// │ │ │ │ │ │ код.
// │ │ │ │ │ └── Runtime Data Areas
// │ │ │ │ │ ├── Назначение: Области памяти JVM.
// │ │ │ │ │ ├── За что отвечает: Хранение объектов (Heap), метаданных (Metaspace), стеков потоков.
// │ │ │ └── Java Class Library
// │ │ │ ├── Назначение: Стандартные библиотеки Java. Предоставление API (java.util, java.io,
// │ │ │ │ java.net) для работы c данными, файлами, сетью.
// │ │ ├── Утилиты для создания и анализа кода.
// │ │ ├── Компиляция (javac), документация (javadoc), архивация (jar), мониторинг (jcmd, jmap).
public class JDKExample {

}
